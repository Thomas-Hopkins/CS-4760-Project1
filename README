|---- README LOGGING UTILITY -----|
|---- AUTHOR: Thomas Hopkins -----|
|----  UMSL CMPSCI-4760-002  -----|

|- COMPILING -|
The provided Makefile will build both the logging utility
	static archive and the driver program and link them
	together. 
Simply run "make" and the "driver" executable will be 
	outputted. Run the driver executable to simulate how
	the logging utility would be used.
A cleaning function is provided. run "make clean" to clean up
	the directory and leave only src behind.
Make will also output the liblog.a static archive. This can
	be used in other programs by linking it.


|- USAGE -|
The driver program simulates a program that may utilize
	the logging utlity to log messages to a specified
	file.

The driver program has two optional arguements:
-t [sec] Specifies the average amount of time between
	messages the user wishes to simulate. The driver
	will randomly choose a time between 0-2*sec.
-f Forces generation of a fatal type log message. This allows
	testing of this functionality.
[filename] Specifies the output file the logging messages
	will be saved to. By default this is "filename".


|- FUNCTIONALITY -|
The driver program will randomly generate a series of messages
	to be logged by the logging utility program.
The logging utility program will generate an internal list
	of these messages and save them out to a file when
	called to do so.


|- WHATS NEW -|
msggen.c/.h generate procedurally random messages and types from
	a list. This is used by the driver program to addmsgs to
	the logging utlity.


|- KNOWN ISSUES/LIMITATIONS -|
getlog will get all log messages that are currently loaded, not
	read them from the logfile. This is because in the 
	function/utility prototype there was no way to know
	what file the user had specified to save to.

addmsg does not immediately exit upon recieving a fatal message.
	Instead it sends a signal back to the driver program to
	handle it there. This is because addmsg also does not
	have a reference to what file the user wants to save to.

The driver program does not read from a file which stores fake
	log messages, instead it generates them by itself. As
	a result it can generate a fatal message causing the 
	logger to stop, bypassing the later functionality. To
	stop this the driver program will only generate a fatal
	message when passed -f argument.
